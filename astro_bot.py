import logging
import os
import requests
from aiogram import Bot, Dispatcher, executor, types
from flatlib.chart import Chart
from flatlib.geopos import GeoPos
from flatlib.datetime import Datetime
from flatlib import const
from dotenv import load_dotenv
import openai

from timezonefinder import TimezoneFinder
import pytz
from datetime import datetime

load_dotenv()

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
openai.api_key = OPENAI_API_KEY

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

user_data = {}

# ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–æ–≤
after_natal_keyboard = types.InlineKeyboardMarkup()
after_natal_keyboard.add(
    types.InlineKeyboardButton("üîÆ –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –¥–µ–Ω—å", callback_data="daily_horoscope")
)

after_horoscope_keyboard = types.InlineKeyboardMarkup()
after_horoscope_keyboard.add(
    types.InlineKeyboardButton("ü™ê –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É", callback_data="show_natal_chart")
)

def get_coords(city_name):
    url = "https://nominatim.openstreetmap.org/search"
    params = {"q": city_name, "format": "json", "limit": 1}
    try:
        response = requests.get(url, params=params, headers={"User-Agent": "astro-bot"})
        data = response.json()
        if data:
            lat = float(data[0]['lat'])
            lon = float(data[0]['lon'])
            return lat, lon
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
    return None, None

def dec_to_dms(deg):
    d = int(deg)
    m_float = abs(deg - d) * 60
    m = int(m_float)
    s = int((m_float - m) * 60)
    return f"{abs(d)}:{m}:{s}"

def get_utc_offset(lat, lon, date_str, time_str):
    tf = TimezoneFinder()
    tz_name = tf.timezone_at(lng=lon, lat=lat)
    if tz_name is None:
        return "+00:00"
    tz = pytz.timezone(tz_name)
    dt_naive = datetime.strptime(date_str + ' ' + time_str, "%Y/%m/%d %H:%M")
    try:
        dt_aware = tz.localize(dt_naive, is_dst=None)
    except pytz.exceptions.AmbiguousTimeError:
        dt_aware = tz.localize(dt_naive, is_dst=True)

    offset_sec = dt_aware.utcoffset().total_seconds()
    hours = int(offset_sec // 3600)
    minutes = int((abs(offset_sec) % 3600) // 60)
    sign = '+' if hours >= 0 else '-'
    return f"{sign}{abs(hours):02d}:{minutes:02d}"

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[message.from_user.id] = {
        'first_name': message.from_user.first_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    await message.reply(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –ê—Å—Ç—Ä–æ–±–æ—Ç. –î–∞–≤–∞–π —Å–æ—Å—Ç–∞–≤–∏–º —Ç–≤–æ—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É.\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 17.04.1995):"
    )
    
@dp.message_handler(lambda message: message.from_user.id in user_data and 'birth_date' not in user_data[message.from_user.id])
async def get_birth_date(message: types.Message):
    date_text = message.text.strip()
    user_first_name = user_data[message.from_user.id].get('first_name', '–¥—Ä—É–≥')  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    try:
        datetime.strptime(date_text, "%d.%m.%Y")
    except ValueError:
        await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, {user_first_name}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17.04.1995).")
        return

    user_data[message.from_user.id]['birth_date'] = date_text
    await message.reply(f"‚è∞ –°–ø–∞—Å–∏–±–æ, {user_first_name}! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 13:45):")

@dp.message_handler(lambda message: message.from_user.id in user_data and 'birth_time' not in user_data[message.from_user.id])
async def get_birth_time(message: types.Message):
    time_text = message.text.strip()
    user_first_name = user_data[message.from_user.id].get('first_name', '–¥—Ä—É–≥')  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    try:
        datetime.strptime(time_text, "%H:%M")
    except ValueError:
        await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, {user_first_name}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13:45).")
        return

    user_data[message.from_user.id]['birth_time'] = time_text
    await message.reply(f"üåç –û—Ç–ª–∏—á–Ω–æ, {user_first_name}! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í–µ–Ω–∞):")

@dp.message_handler(lambda message: message.from_user.id in user_data and 'birth_place' not in user_data[message.from_user.id])
async def get_birth_place(message: types.Message):
    city_name = message.text.strip()
    user_first_name = user_data[message.from_user.id].get('first_name', '–¥—Ä—É–≥')  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    user_data[message.from_user.id]['birth_place'] = city_name

    lat, lon = get_coords(city_name)
    if lat is not None and lon is not None:
        pos = GeoPos(dec_to_dms(lat), dec_to_dms(lon))
    else:
        await message.reply(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ {city_name}, {user_first_name}. –ò—Å–ø–æ–ª—å–∑—É—é –ú–æ—Å–∫–≤—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        lat, lon = 55.7558, 37.6173
        pos = GeoPos("55:45:21", "37:37:03")

    date = user_data[message.from_user.id]['birth_date']
    time = user_data[message.from_user.id]['birth_time']

    try:
        d, m, y = date.split('.')
        date_formatted = f"{y}/{m}/{d}"
    except Exception:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã, {user_first_name}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return

    try:
        offset = get_utc_offset(lat, lon, date_formatted, time)
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, {user_first_name}: {e}")
        return

    try:
        dt = Datetime(date_formatted, time, offset)
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏, {user_first_name}: {e}")
        return

    try:
        chart = Chart(dt, pos, IDs=[ 
            const.SUN, const.MOON, const.MERCURY, const.VENUS, const.MARS,
            const.JUPITER, const.SATURN, const.URANUS, const.NEPTUNE, const.PLUTO,
            const.NORTH_NODE, const.SOUTH_NODE
        ])
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã, {user_first_name}: {e}")
        return

    signs_emoji = {
        'Aries': '‚ôàÔ∏è –û–≤–µ–Ω', 'Taurus': '‚ôâÔ∏è –¢–µ–ª–µ—Ü', 'Gemini': '‚ôäÔ∏è –ë–ª–∏–∑–Ω–µ—Ü—ã',
        'Cancer': '‚ôãÔ∏è –†–∞–∫', 'Leo': '‚ôåÔ∏è –õ–µ–≤', 'Virgo': '‚ôçÔ∏è –î–µ–≤–∞',
        'Libra': '‚ôéÔ∏è –í–µ—Å—ã', 'Scorpio': '‚ôèÔ∏è –°–∫–æ—Ä–ø–∏–æ–Ω', 'Sagittarius': '‚ôêÔ∏è –°—Ç—Ä–µ–ª–µ—Ü',
        'Capricorn': '‚ôëÔ∏è –ö–æ–∑–µ—Ä–æ–≥', 'Aquarius': '‚ôíÔ∏è –í–æ–¥–æ–ª–µ–π', 'Pisces': '‚ôìÔ∏è –†—ã–±—ã',
    }

    names = {
        const.SUN: '–°–æ–ª–Ω—Ü–µ', const.MOON: '–õ—É–Ω–∞', const.MERCURY: '–ú–µ—Ä–∫—É—Ä–∏–π',
        const.VENUS: '–í–µ–Ω–µ—Ä–∞', const.MARS: '–ú–∞—Ä—Å', const.JUPITER: '–Æ–ø–∏—Ç–µ—Ä',
        const.SATURN: '–°–∞—Ç—É—Ä–Ω', const.URANUS: '–£—Ä–∞–Ω', const.NEPTUNE: '–ù–µ–ø—Ç—É–Ω',
        const.PLUTO: '–ü–ª—É—Ç–æ–Ω', const.NORTH_NODE: '–í–æ—Å—Ö–æ–¥—è—â–∏–π —É–∑–µ–ª', const.SOUTH_NODE: '–ù–∏—Å—Ö–æ–¥—è—â–∏–π —É–∑–µ–ª'
    }

    info_lines = []
    for planet in names:
        obj = chart.get(planet)
        if obj:
            emoji = signs_emoji.get(obj.sign, obj.sign)
            info_lines.append(f"‚Ä¢ {names[planet]}: {emoji}")

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É", callback_data="show_natal_chart"),
        types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –¥–µ–Ω—å", callback_data="daily_horoscope")
    )

    await message.reply(
        f"ü™ê –í–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∞, {user_first_name}:\n" +
        "\n".join(info_lines) +
        "\n\n–•–æ—á–µ—à—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –∏–ª–∏ –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è? –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ üëá",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'show_natal_chart')
async def show_natal_chart_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = user_data.get(user_id)

    try:
        await callback_query.answer("‚ú® –°—á–∏—Ç–∞–µ–º —Ç–≤–æ—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É...")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query: {e}")

    if not user:
        await bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å /start –∏ –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ‚ú®")
        return

    user_first_name = user.get('first_name', '–¥—Ä—É–≥')  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    prompt = (
        f"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥.\n"
        f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user['birth_date']}, "
        f"–≤—Ä–µ–º—è: {user['birth_time']}, "
        f"–º–µ—Å—Ç–æ: {user['birth_place']}.\n"
        f"–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã.\n"
        f"–í—ã–¥–µ–ª—è–π –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–µ—Ç –∏ –∑–Ω–∞–∫–æ–≤ –ó–æ–¥–∏–∞–∫–∞ **–∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º**, "
        f"—Ä—è–¥–æ–º —Å –Ω–∏–º–∏ –¥–æ–±–∞–≤–ª—è–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–º–æ–¥–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚òÄÔ∏è –¥–ª—è **–°–æ–ª–Ω—Ü–µ**, ‚ôàÔ∏è –¥–ª—è **–û–≤–µ–Ω**).\n"
        f"–ü–∏—à–∏ –∫—Ä–∞—Å–∏–≤–æ, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ.\n\n"
        f"‚ùó –í–º–µ—Å—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ `#`, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –∏ —ç–º–æ–¥–∂–∏:\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        f"**ü™ê –ü–ª–∞–Ω–µ—Ç—ã**\n"
        f"**üè† –î–æ–º–∞**\n"
        f"**üîó –ê—Å–ø–µ–∫—Ç—ã**\n"
        f"**üîÆ –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞**\n"
    )

    try:
        typing_msg = await bot.send_message(user_id, "‚úçÔ∏è –ë–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É...")
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8,
        )
        answer = response.choices[0].message.content
        await bot.delete_message(chat_id=user_id, message_id=typing_msg.message_id)        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        await bot.send_message(user_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã, {user_first_name}.")
        return

    await bot.send_message(user_id, f"üåü –í–æ—Ç —Ç–≤–æ—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞, {user_first_name}:\n{answer}", parse_mode="Markdown", reply_markup=after_natal_keyboard)

@dp.message_handler()
async def chat_with_gpt(message: types.Message):
    user_id = message.from_user.id          # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
    user = user_data.get(message.from_user.id)
    if not user:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å /start –∏ –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ‚ú®")
        return

    prompt = (
        f"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å. "
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user['birth_date']}, "
        f"–≤—Ä–µ–º—è: {user['birth_time']}, "
        f"–º–µ—Å—Ç–æ: {user['birth_place']}.\n"
        f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è –∑–Ω–∞–Ω–∏—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∏ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã.\n"
        f"–í–æ–ø—Ä–æ—Å: {message.text}\n"
        f"–û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ, –Ω–æ —è—Å–Ω–æ –∏ –∫—Ä–∞—Å–∏–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∂–∏ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º."
)

    try:
        typing_msg = await bot.send_message(user_id, "‚úçÔ∏è –ë–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç...")
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8,
        )
        answer = response.choices[0].message.content
        await bot.delete_message(chat_id=user_id, message_id=typing_msg.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    await message.reply(answer, parse_mode="Markdown")
    
@dp.callback_query_handler(lambda c: c.data == 'daily_horoscope')
async def daily_horoscope_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = user_data.get(user_id)

    try:
        await callback_query.answer("‚ú® –ì–æ—Ç–æ–≤–ª—é —Ç–≤–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query: {e}")

    if not user:
        await bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å /start –∏ –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ‚ú®")
        return

    user_first_name = user.get('first_name', '–¥—Ä—É–≥')  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    prompt = (
        f"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥.\n"
        f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user['birth_date']}, "
        f"–≤—Ä–µ–º—è: {user['birth_time']}, "
        f"–º–µ—Å—Ç–æ: {user['birth_place']}.\n"
        f"–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã –∏ —Ç—Ä–µ–Ω–¥—ã –¥–Ω—è.\n"
        f"–í—ã–¥–µ–ª—è–π –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã **–∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º** –∏ –¥–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∂–∏.\n"
        f"–ü–∏—à–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ –∏ —è—Å–Ω–æ."
    )

    try:
        typing_msg = await bot.send_message(user_id, "‚úçÔ∏è –ë–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø...")
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8,
        )
        answer = response.choices[0].message.content
        await bot.delete_message(chat_id=user_id, message_id=typing_msg.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        await bot.send_message(user_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, {user_first_name}.")
        return

    await bot.send_message(user_id, f"üîÆ –í–æ—Ç —Ç–≤–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, {user_first_name}:\n{answer}", parse_mode="Markdown", reply_markup=after_horoscope_keyboard)    

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
